{"version":3,"sources":["logo.svg","component/Searchbar.js","component/Imagelist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Searchbar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","this","className","style","type","onChange","e","setState","target","value","placeholder","React","Component","Imagelist","images","map","image","class","src","urls","regular","App","onSearchSubmit","a","console","log","axios","get","params","query","headers","Authorization","then","response","data","results","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,oKC4B5BC,G,wNAxBXC,MAAQ,CAAEC,KAAO,I,EACjBC,aAAe,SAAAC,GACXA,EAAMC,iBACN,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,uDAI1B,IAAD,OACR,OAEI,0BAAMK,SAAUC,KAAKL,cACrB,yBAAKM,UAAU,qBACf,yBAAKA,UAAU,qBAAqBC,MAAO,CAAC,MAAU,QAElD,2BAAOD,UAAU,SAASE,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEZ,KAAKW,EAAEE,OAAOC,SAASC,YAAY,wBAE1G,uBAAGR,UAAU,iBAEjB,yBAAKA,UAAU,kB,GApBCS,IAAMC,Y,iBCmBfC,EAnBG,SAAAd,GAEd,IAAMe,EAAQf,EAAMe,OAAOC,KAAI,SAACC,GAC5B,OAAO,oCACI,yBAAKb,MAAO,CAAC,OAAS,SACrB,yBAAKc,MAAM,0BAA0BC,IAAKF,EAAMG,KAAKC,QAAUjB,MAAO,CAAC,MAAQ,QAAQ,OAAS,gBAMhH,OACI,yBAAKD,UAAU,gBAAgBC,MAAO,CAAC,MAAQ,SAC9CW,ICwBMO,E,4MA/Bb3B,MAAQ,CAACoB,OAAS,I,EAClBQ,e,uCAAiB,WAAO3B,GAAP,SAAA4B,EAAA,6DACfC,QAAQC,IAAI9B,GADG,SAEQ+B,IAAMC,IAAI,yCAA0C,CAC3EC,OAAQ,CAAEC,MAAOlC,GACjBmC,QAAS,CAEPC,cAAe,2DAIhBC,MAAK,SAAAC,GACHT,QAAQC,IAAR,gBACA,EAAKlB,SAAS,CAAEO,OAAQmB,EAASC,KAAKC,aAZ1B,yD,6GAkBjB,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAWF,SAAUC,KAAKqB,iBAE1B,kBAAC,EAAD,CAAWR,OAAQb,KAAKP,MAAMoB,e,GAzBpBH,IAAMC,WCKJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.da6773ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nclass Searchbar extends React.Component {\r\n    \r\n    state = { term : ''};\r\n    onFormSubmit = event =>{\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.term);\r\n        // console.log(event.state.term);\r\n    }\r\n    \r\n    render(){\r\n    return(\r\n      \r\n        <form onSubmit={this.onFormSubmit}>\r\n        <div className=\"ui search bg-dark\">\r\n        <div className=\"ui icon input my-4\" style={{'width' : \"70%\"}}>\r\n            \r\n            <input className=\"prompt\" type=\"search\" onChange={e => this.setState({ term:e.target.value})} placeholder=\"Search countries...\" />\r\n            \r\n            <i className=\"search icon\"></i>\r\n        </div>\r\n        <div className=\"results\"></div>\r\n        </div>\r\n        </form>\r\n    );\r\n}\r\n}\r\nexport default Searchbar;","import React from 'react'\r\n\r\nconst Imagelist = props =>{\r\n    \r\n    const images= props.images.map((image) => {\r\n        return <>\r\n                   <div style={{'margin':'20px'}}>\r\n                    <img class=\"ui medium rounded image\" src={image.urls.regular}  style={{'width':'200px','height':'200px'}}/>\r\n                    </div> \r\n            </>\r\n      \r\n    })\r\n\r\n    return(\r\n        <div className=\"ui grid my-4 \" style={{'width':'100%'}}>     \r\n        {images}   \r\n        </div>\r\n    );\r\n \r\n}\r\n\r\nexport default Imagelist;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Searchbar from './component/Searchbar';\nimport axios from 'axios';\nimport Imagelist from './component/Imagelist';\n\nclass App extends React.Component {\n  state = {images : []};\n  onSearchSubmit = async (term) =>  {\n    console.log(term);\n    const response = await axios.get('https://api.unsplash.com/search/photos', {\n    params: { query: term },\n    headers: {\n      \n      Authorization: 'Client-ID QZynfxFml_1J_5quTiFpbJyaWEjy9QC0C_1EB_XASdQ'\n    }\n  \n    })\n    .then(response => {\n       console.log(this);\n       this.setState({ images: response.data.results })\n    })\n  }\n\n  \n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"ui container\">\n        <Searchbar onSubmit={this.onSearchSubmit} />\n        {/* <h1> found :{this.state.images.length} images </h1> */}\n        <Imagelist images={this.state.images} />\n        </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}